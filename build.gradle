buildscript {
  ext.kotlinVersion = "1.2.71"
  ext.roomVersion = "1.1.1"

  repositories {
    jcenter()
    mavenCentral()
    google()
  }

  Properties properties = new Properties()
  properties.load(project.rootProject.file('local.properties').newDataInputStream())
  ext.gradle_plugin_version = properties.getProperty("gradle.plugin.version")

  dependencies {
    classpath "com.android.tools.build:gradle:$gradleVersion"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
  }
}

allprojects {
  buildscript {
    apply(from: "$rootDir/dependencies.gradle")
    apply(from: "$rootDir/scripts/deployment.gradle")

    repositories {
      google()
      jcenter()
      trinerdis(it)
    }

    dependencies {
      classpath("com.android.tools.build:gradle:$gradlePluginVersion")
    }
  }

  apply(plugin: "maven")

  repositories {
    google()
    jcenter()
    trinerdis(it)
    flatDir {
      dirs("libs")
    }
  }

  // Shows more error lines when Android Data Binding error occurs.
  gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
      options.compilerArgs << "-Xmaxerrs" << "50000"
      options.compilerArgs << "-Xmaxwarns" << "50000"
    }
  }

  pluginManager.withPlugin("kotlin-kapt") {
    // https://discuss.kotlinlang.org/t/kapt-illegalstateexception-failed-to-analyze-when-encountering-a-large-amount-of-errors/5184
    kapt {
      javacOptions {
        option("-Xmaxwarns", 500000)
        option("-Xmaxerrs", 500000)
      }
    }
  }

  def kotlinDefinitions = {
    sourceSets {
      main.java.srcDirs += ["$projectDir/src/main/java", "$projectDir/src/main/kotlin"]
      main.kotlin.srcDirs += ["$projectDir/src/main/java", "$projectDir/src/main/kotlin"]
      test.java.srcDirs += ["$projectDir/src/test/java", "$projectDir/src/test/kotlin"]
      test.kotlin.srcDirs += ["$projectDir/src/test/java", "$projectDir/src/test/kotlin"]
    }
  }

  def androidDefinitions = {
    android {
      compileSdkVersion(compileSdkVersionVar)
      buildToolsVersion(buildToolsVersionVar)

      defaultConfig {
        minSdkVersion(minSdkVersionVar)
        targetSdkVersion(targetSdkVersionVar)

        multiDexEnabled = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
      }

      buildTypes {
        release {
          minifyEnabled = false
          proguardFiles(
            getDefaultProguardFile("proguard-android.txt"),
            "$projectDir/proguard-rules.pro"
          )
        }
      }

      sourceSets {
        main.java.srcDirs += ["$projectDir/src/main/java", "$projectDir/src/main/kotlin"]
        test.java.srcDirs += ["$projectDir/src/test/java", "$projectDir/src/test/kotlin"]
        test.resources.srcDirs += "$projectDir/src/main/res"
      }

      compileOptions {
        sourceCompatibility(JavaVersion.VERSION_1_8)
        targetCompatibility(JavaVersion.VERSION_1_8)
      }

      dexOptions {
        preDexLibraries = true

        // Fixes main dex method count limit problem, see:
        // https://stackoverflow.com/questions/32721083/too-many-classes-in-main-dex-list-main-dex-capacity-exceeded/41097666
        keepRuntimeAnnotatedClasses = false
      }

      packagingOptions {
        pickFirst "META-INF/**"
        exclude "META-INF/**"
        exclude "asm-license.txt"
      }

      lintOptions {
        lintConfig = file("$rootDir/lint.xml")
        abortOnError = false
        quiet = true
        checkReleaseBuilds = false
        xmlReport = true
        htmlReport = true
      }
    }
  }

  pluginManager.withPlugin("kotlin", kotlinDefinitions)
  pluginManager.withPlugin("com.android.library", androidDefinitions)
  pluginManager.withPlugin("com.android.application", androidDefinitions)
}

